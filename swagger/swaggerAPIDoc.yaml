openapi: 3.0.3
info:
  title: Todo's Backend- OpenAPI 3.0
  description: |-
    This is a sample basic todo's API Server based on the OpenAPI 3.0 specification.  
    You can now help us improve the API whether it's by making changes to the definition itself or to the code or developing the frontend for the backend API. 



    Some useful links:
    - [The Todos-Backend API repository](https://github.com/rukesh-shrestha/Backend-API-Todos.git)

  contact:
    email: rukesh.shrestha11@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Development Server

tags:
  - name: Todo's
    description: Performing CRUD implementing todo's
  - name: User
    description: User Management System of the Todo's

paths:
  /api/todos:
    get:
      tags:
        - Todo's
      summary: Get all the Todo's
      description: Get all the todo's created by the user's
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Todos"

  /api/todos/{todosID}:
    get:
      tags:
        - Todo's
      summary: Find the todos by ID
      description: Returns a single Todo
      parameters:
        - name: todosID
          in: path
          description: ID of the todo
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfull Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todos"
        "400":
          description: Invalid ID

        "404":
          description: Data not found

  /api/todos/update:
    post:
      tags:
        - Todo's
      summary: Create the Todos Data
      requestBody:
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                  description: Title of the todos
                description:
                  type: string
                  description: Brief description of the todos title.
        required: true

      responses:
        "200":
          description: Todo's created successfully
        "400":
          description: Missing Field - Validation Error

  /api/todos/update/{todosID}:
    put:
      tags:
        - Todo's
      summary: Find and Update  the todos by ID
      description: Returns a single Todo
      parameters:
        - name: todosID
          in: path
          description: ID of the todo
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                title:
                  type: string
                  description: Title of the todos
                description:
                  type: string
                  description: Brief description of the todos title.
        required: true
      responses:
        "200":
          description: Successfull Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todos"
        "400":
          description: Invalid ID

        "404":
          description: Data not found
  /api/todos/delete/{todosID}:
    delete:
      tags:
        - Todo's
      summary: Find the todos by ID and delete it
      description: Returns a single Todo
      parameters:
        - name: todosID
          in: path
          description: ID of the todo
          required: true
          schema:
            type: string
            description: Object Id of the todos
      responses:
        "200":
          description: Successfull Operation

        "400":
          description: Invalid ID

        "404":
          description: Data not found

  /api/users/signup:
    post:
      tags:
        - User
      summary: Create the new user
      description: Registering the new user for the sign up
      requestBody:
        description: User properties object
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                  description: username of the user
                  example: Ram Sharma
                email:
                  type: string
                  description: email of the user
                  example: shreeram23@gmail.com
                firstName:
                  type: string
                  description: first name of the user
                  example: Ram Shree
                lastName:
                  type: string
                  description: last name of the user
                  example: Sharma
                password:
                  type: string
                  description: password of the user
                  example: password23
                confirmPassword:
                  type: string
                  description: Re-type your password
                  example: password23
        required: true

      responses:
        "200":
          description: User Created Successfully
        "400":
          description: Validation Error - Missing Field
        "403":
          description: Validation Error - Email or Password field invalid
        "401":
          description: Unautthorized - User Already Exist

components:
  schemas:
    AllSchemaRepetated:
      type: object
      properties:
        id:
          type: string
          description: Id to identifiy the particular data. Updated automatically.
          example: 34567865fdghgnbvc45964gv
        createdAt:
          type: string
          description: created date and time. Updated automatically.
          example: 2023-07-29T07:31:04.400Z
        updatedAt:
          type: string
          description: updated date and time. Updated automatically.
          example: 2023-07-29T07:31:04.400Z
        __v:
          type: string
          description: version key. Automatically created.
          example: 0
      x-visibility: hidden

    Todos:
      type: object
      required:
        - title
        - description
      allOf:
        - properties:
            title:
              type: string
              description: Title of the todos
              example: Reading book.
            description:
              type: string
              description: Brief description of the todos title.
              example: I am going to read Rich Dad Poor Dad Book.
        - $ref: "#/components/schemas/AllSchemaRepetated"

    User:
      type: object
      required:
        - username
        - email
        - firstName
        - lastName
        - password

      allOf:
        - properties:
            username:
              type: string
              description: username of the user
              example: Ram Sharma
            email:
              type: string
              description: email of the user
              example: shreeram23@gmail.com
            firstName:
              type: string
              description: first name of the user
              example: Ram Shree
            lastName:
              type: string
              description: last name of the user
              example: Sharma
            password:
              type: string
              description: password of the user
              example: password23
        - $ref: "#/components/schemas/AllSchemaRepetated"
